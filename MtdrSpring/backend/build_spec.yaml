version: 0.1
component: build
timeoutInSeconds: 10000
shell: bash
failImmediatelyOnError: true

env:
  variables:
    IMAGE_NAME: "todolistapp-springboot"
    IMAGE_VERSION: "0.1"
    DOCKER_REGISTRY: "qro.ocir.io/axs2pxpd649r/reacttodo/rkihw"
    JAVA_HOME: "/usr/lib64/graalvm/graalvm22-ee-java17"
    DOCKER_USERNAME: "axs2pxpd649r/prm-123@hotmail.com"
    DOCKER_PASSWORD: "7srs5zmwRFMBj]>VBrnL"
  exportedVariables:
    - IMAGE

steps:
  - type: Command
    name: Set Environment Variables
    shell: bash
    timeoutInSeconds: 300
    command: |
      if [ -z "$DOCKER_REGISTRY" ]; then
        echo "DOCKER_REGISTRY not set. Exiting..."
        exit 1
      fi
      export IMAGE=${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_VERSION}
      echo "Environment variables set: IMAGE=${IMAGE}"
      export PATH=$JAVA_HOME/bin:$PATH
      echo "PATH set to: $PATH"

  - type: Command
    name: Install GraalVM Enterprise 22.x Native Image for Java17
    shell: bash
    timeoutInSeconds: 600
    command: |
      echo "Installing GraalVM Enterprise..."
      yum -y install graalvm22-ee-17-native-image
      if [ $? -ne 0 ]; then
        echo "GraalVM installation failed!"
        exit 1
      fi
      echo "GraalVM installation succeeded."
  
  - type: Command
    name: Login to OCI Docker Registry
    shell: bash
    timeoutInSeconds: 300
    command: |
      echo "Logging in to OCI Docker Registry..."
      echo $DOCKER_PASSWORD | docker login $DOCKER_REGISTRY -u $DOCKER_USERNAME --password-stdin
      if [ $? -ne 0 ]; then
        echo "Docker login failed!"
        exit 1
      fi
      echo "Docker login succeeded."
  
  - type: Command
    name: Build Application
    shell: bash
    timeoutInSeconds: 600
    command: |
      echo "Building the application with Maven..."
      cd MtdrSpring/backend  
      mvn clean package spring-boot:repackage
      if [ $? -ne 0 ]; then
        echo "Maven build failed!"
        exit 1
      fi
      echo "Maven build succeeded."

  - type: Command
    name: Build Docker Image
    shell: bash
    timeoutInSeconds: 600
    command: |
      echo "Building Docker image..."
      docker build -f MtdrSpring/backend/Dockerfile -t $IMAGE MtdrSpring/backend --platform=linux/arm64
      if [ $? -ne 0 ]; then
        echo "Docker build failed!"
        exit 1
      fi
      echo "Docker build succeeded."

  - type: Command
    name: Push Docker Image
    shell: bash
    timeoutInSeconds: 600
    command: |
      echo "Pushing Docker image to registry..."
      docker push $IMAGE
      if [ $? -ne 0 ]; then
        echo "Docker push failed!"
        exit 1
      fi
      echo "Docker push succeeded."
      
  - type: Command
    name: Download kubectl
    command: |
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      chmod +x kubectl
      mkdir -p ~/.local/bin
      mv ./kubectl ~/.local/bin/kubectl
      export PATH=$PATH:~/.local/bin
  
  - type: Command
    name: Create Kubecofig and Undeploy pods
    command: |
      mkdir -p ~/.kube
      oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.mx-queretaro-1.aaaaaaaat6zl4xaxbberx5abgwswk7bwhtu4fdzoqddtj5wdpcx5lpuumpsa --file $HOME/.kube/config --region mx-queretaro-1 --token-version 2.0.0  --kube-endpoint PUBLIC_ENDPOINT
      oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.mx-queretaro-1.aaaaaaaat6zl4xaxbberx5abgwswk7bwhtu4fdzoqddtj5wdpcx5lpuumpsa --file $HOME/.kube/config --region mx-queretaro-1 --token-version 2.0.0  --kube-endpoint PRIVATE_ENDPOINT
      echo delete frontend deployment and service...
      ~/.local/bin/kubectl -n mtdrworkshop delete deployment todolistapp-springboot-deployment
      ~/.local/bin/kubectl -n mtdrworkshop delete service todolistapp-springboot-service
