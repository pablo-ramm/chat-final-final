version: 0.1
component: build
timeoutInSeconds: 10000
shell: bash
failImmediatelyOnError: true

env:
  variables:
    IMAGE_NAME: "todolistapp-springboot"
    IMAGE_VERSION: "0.1"
    DOCKER_REGISTRY: "<region-code>.ocir.io/mytenancy/myrepo"
  exportedVariables:
    - IMAGE

steps:
  - type: Command
    name: Set Environment Variables
    shell: bash
    timeoutInSeconds: 300
    command: |
      if [ -z "$DOCKER_REGISTRY" ]; then
        echo "DOCKER_REGISTRY not set. Exiting..."
        exit 1
      fi
      export IMAGE=${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_VERSION}
      echo "Environment variables set: IMAGE=${IMAGE}"

  - type: Command
    name: Build Application
    shell: bash
    timeoutInSeconds: 600
    command: |
      echo "Building the application with Maven..."
      cd MtdrSpring/backend  
      mvn clean package spring-boot:repackage
      if [ $? -ne 0 ]; then
        echo "Maven build failed!"
        exit 1
      fi
      echo "Maven build succeeded."

  - type: Command
    name: Build Docker Image
    shell: bash
    timeoutInSeconds: 600
    command: |
      echo "Building Docker image..."
      docker build -f MtdrSpring/backend/Dockerfile -t $IMAGE MtdrSpring/backend
      if [ $? -ne 0 ]; then
        echo "Docker build failed!"
        exit 1
      fi
      echo "Docker build succeeded."

  - type: Command
    name: Push Docker Image
    shell: bash
    timeoutInSeconds: 600
    command: |
      echo "Pushing Docker image to registry..."
      docker push $IMAGE
      if [ $? -ne 0 ]; then
        echo "Docker push failed!"
        exit 1
      fi
      echo "Docker push succeeded."

  - type: Command
    name: Clean Up Local Docker Image
    shell: bash
    timeoutInSeconds: 300
    command: |
      echo "Cleaning up local Docker image..."
      docker rmi "$IMAGE"
      if [ $? -ne 0 ]; then
        echo "Docker rmi failed!"
        exit 1
      fi
      echo "Local Docker image removed."

outputArtifacts:
  - name: build-artifacts
    type: BINARY
    location: target/

  - name: docker-image
    type: DOCKER_IMAGE
    location: ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_VERSION}
